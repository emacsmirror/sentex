* segment

This repo is an attempt to port sentence ending rules from OmegaT and the Okapi Framework to Emacs Lisp.

OmegaT and the Okapi Framework use ICU regular expressions stored in SRX files (copied into this repo) to create sophisticated rules for segmenting texts. Each rule has a before break and after break regular expression, as well as a boolean break or don't break value.

For now, only some English rules have been ported, and only two movement functions exist: =segment-forward-sentence= and =segment-backward-sentence=.

As this is new code, it hasn't been tested much at all. In particular, I don't yet know how it interacts with custom =sentence-end= values, or other possible snags, such as anyone else's Emacs other than mine (or even mine).

Some functions are also included which add the before-break rules to [[https://github.com/noctuid/emacs-sentence-navigation][emacs-sentence-navigation]]'s abbreviation list and then call on of its sentence movement functions. As I don't know that code very well, I'm not yet sure how to implement the after-break rules.

* converting the whole ruleset

I'm also hoping to programmatically convert the rulesets for all languages that have one. Converting regular expression syntax using regular expressions is a headfuck though. Work so far is in =segment-convert.el=. Any help would be appreciated.

* features

- sophisticated non-break and break rules for common abbreviations and other situations where a dot doesn't end a sentence.
- add you own custom rules.
- doesn't tell you to shut up and use two spaces for periods, as if that were a solution (what if you're not the one typing the spaces after the periods, and you have a whole book of periods? are you going to tell me to use a regex to replace all the single space periods with double spaces...?)
- doesn't assume sentences begin with a capital letter.
- should work with filled text.
